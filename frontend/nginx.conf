# Detect search engines/bots
map $http_user_agent $is_bot {
    default 0;
    ~*(googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora\ link\ preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|whatsapp|Screaming\ Frog) 1;
}

server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_comp_level 6;
    gzip_min_length 1000;

    client_max_body_size 100M;
    client_body_buffer_size 128k;
    
    # Increase timeouts for large videos
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    proxy_read_timeout 300;
    send_timeout 300;

    # Cache static assets
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
    
    # Special handling for video files
    location ~* \.(mp4|webm|ogg)$ {
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        add_header Accept-Ranges bytes;
        
        # Enable byte-range requests for video streaming
        mp4;
        mp4_buffer_size 1m;
        mp4_max_buffer_size 5m;
    }

    # Handle React Router - with bot detection
    location / {
        # If it's a bot, proxy to rendertron
        if ($is_bot) {
            # Rewrite and pass to Rendertron, running on localhost:3000
            rewrite .* /render/$scheme://$host$request_uri? break;
            proxy_pass http://127.0.0.1:3000;
            break;
        }
        
        # For non-bot requests, serve normally
        try_files $uri $uri/ /index.html;
    }

    # Direct access to rendertron service
    location /render/ {
        # Only allow internal redirects to protect the service
        internal;
        
        # Proxy to rendertron service
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        
        # Add extra Rendertron headers
        proxy_set_header X-Rendertron-Rewrite "1";
    }

    # Health check endpoint for Cloud Run
    location /health {
        access_log off;
        return 200 'OK';
    }

    # Security headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
} 