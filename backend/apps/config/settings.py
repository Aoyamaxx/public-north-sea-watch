"""
Django settings for north_sea_watch project.

Generated by 'django-admin startproject' using Django 4.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-er1p7kwhnuf@a9_=3l@n_m7+m3l2*basba@28#o(n0*mywri5s')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')

print(f"DEBUG: {DEBUG}")
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.north_sea_watch',
    'rest_framework',
    'corsheaders',
    'ckeditor',
    'ckeditor_uploader',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware should be at the top
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # WhiteNoise middleware for serving static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add debug middleware in production to help diagnose issues
if not DEBUG:
    MIDDLEWARE.append('apps.config.middleware.AdminDebugMiddleware')

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

# CSRF settings
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_TRUSTED_ORIGINS = [
    'https://northseawatch.org',
    'https://api.northseawatch.org',
    'https://*.northseawatch.org',
    'https://*.run.app'
]

ROOT_URLCONF = 'apps.config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apps.config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

print(f"DATABASE_URL: {os.environ.get('DATABASE_URL')}")
print(f"AIS_DATABASE_URL: {os.environ.get('AIS_DATABASE_URL')}")
print(f"CLOUD_SQL_CONNECTION_NAME: {os.environ.get('CLOUD_SQL_CONNECTION_NAME')}")

# 检查是否在生产环境中
IS_CLOUD_RUN = os.environ.get('CLOUD_SQL_CONNECTION_NAME') is not None and os.path.exists('/cloudsql')
IS_LOCAL_DOCKER = os.environ.get('CLOUD_SQL_CONNECTION_NAME') is not None and not os.path.exists('/cloudsql')
IS_DEVELOPMENT = not IS_CLOUD_RUN and not IS_LOCAL_DOCKER

print(f"IS_CLOUD_RUN: {IS_CLOUD_RUN}")
print(f"IS_LOCAL_DOCKER: {IS_LOCAL_DOCKER}")
print(f"IS_DEVELOPMENT: {IS_DEVELOPMENT}")

db_user = os.environ.get('DB_USER', 'aoyamaxx')
db_password = os.environ.get('DB_PASSWORD', 'aoyamaxx')

if IS_CLOUD_RUN:
    CLOUD_SQL_CONNECTION_NAME = os.environ.get('CLOUD_SQL_CONNECTION_NAME')
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'backend',
            'USER': db_user,
            'PASSWORD': db_password,
            'HOST': f'/cloudsql/{CLOUD_SQL_CONNECTION_NAME}',
            'PORT': '',
        },
        'ais_data': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'ais_data_collection',
            'USER': db_user,
            'PASSWORD': db_password,
            'HOST': f'/cloudsql/{CLOUD_SQL_CONNECTION_NAME}',
            'PORT': '',
        }
    }
    
    print(f"Cloud Run DB Host: {DATABASES['default']['HOST']}")
elif IS_LOCAL_DOCKER or IS_DEVELOPMENT:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'backend',
            'USER': 'aoyamaxx',
            'PASSWORD': 'aoyamaxx',
            'HOST': 'cloudsql-proxy',
            'PORT': '5432',
            # Clear below line to disable connection pooling
            'CONN_MAX_AGE': 300,
        },
        'ais_data': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'ais_data_collection',
            'USER': 'aoyamaxx',
            'PASSWORD': 'aoyamaxx',
            'HOST': 'cloudsql-proxy',
            'PORT': '5432',
            # Clear below line to disable connection pooling
            'CONN_MAX_AGE': 300,
        }
    }
    
    print(f"Local DB Host: {DATABASES['default']['HOST']}")

print(f"Default DB: {DATABASES['default']['NAME']}")
print(f"AIS DB: {DATABASES['ais_data']['NAME']}")
print(f"Default DB Host: {DATABASES['default']['HOST']}")
print(f"AIS DB Host: {DATABASES['ais_data']['HOST']}")

# Database routers
DATABASE_ROUTERS = ['apps.north_sea_watch.db_routers.AisDataRouter']


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(Path(__file__).resolve().parent.parent.parent, 'staticfiles')

print(f"STATIC_ROOT: {STATIC_ROOT}")

# Media files (Uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(Path(__file__).resolve().parent.parent.parent, 'media')

# CKEditor settings
CKEDITOR_UPLOAD_PATH = 'uploads/'
CKEDITOR_RESTRICT_BY_USER = True
CKEDITOR_BROWSE_SHOW_DIRS = True
CKEDITOR_IMAGE_BACKEND = 'pillow'

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink'],
            ['RemoveFormat', 'Source'],
            ['Format', 'Font', 'FontSize'],
            ['TextColor', 'BGColor'],
            ['Table', 'HorizontalRule', 'Smiley', 'SpecialChar'],
        ],
        'width': '100%',
        'height': 300,
        'tabSpaces': 4,
        'removePlugins': 'exportpdf',
        'allowedContent': True,  # Allow all content
        'enterMode': 2,  # CKEDITOR.ENTER_BR - Use <br> instead of <p>
        'forcePasteAsPlainText': False,  # Allow pasting formatted text
        'format_tags': 'p;h1;h2;h3;h4;h5;h6;pre',  # Available format tags
        'extraPlugins': 'autogrow',  # Auto-grow plugin
        'autoGrow_minHeight': 300,  # Minimum height
        'autoGrow_maxHeight': 600,  # Maximum height
        'versionCheck': False,  # Disable version check
    },
}

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_ROOT = STATIC_ROOT

# Add additional locations of static files
STATICFILES_DIRS = []

# Add static directory if it exists
static_dir = os.path.join(BASE_DIR, "static")
if os.path.exists(static_dir):
    STATICFILES_DIRS.append(static_dir)

# Ensure admin static files are properly served
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Debug static file serving
if not DEBUG:
    print("Static files will be served by WhiteNoise in production mode")
    print(f"STATIC_ROOT: {STATIC_ROOT}")
    print(f"STATICFILES_DIRS: {STATICFILES_DIRS}")
    print(f"STATIC_URL: {STATIC_URL}")
    print(f"ADMIN_MEDIA_PREFIX: {ADMIN_MEDIA_PREFIX}")

print(f"STATICFILES_DIRS: {STATICFILES_DIRS}")
print(f"STATIC_URL: {STATIC_URL}")
print(f"WHITENOISE_ROOT: {WHITENOISE_ROOT}")
print(f"ADMIN_MEDIA_PREFIX: {ADMIN_MEDIA_PREFIX}")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db.backends': {
            'level': 'INFO',
            'handlers': ['console'],
        },
        'apps.north_sea_watch': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'apps.common': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Tracking configuration
TRACKING_ALLOWED_DOMAINS = ['northseawatch.org', 'www.northseawatch.org']

# IP-API configuration
IP_API_URL = 'http://ip-api.com/json/{ip}'
# Fields ordered as they appear in the original IP-API response
IP_API_FIELDS = ['status', 'country', 'countryCode', 'region', 'regionName', 'city', 'zip', 'lat', 'lon', 'timezone', 'isp', 'org', 'as']
